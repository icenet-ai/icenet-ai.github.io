---
// import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  backgroundColor = await Astro.slots.render('backgroundColor'),
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const background_image_class =
  image !== undefined
    ? 'after:absolute after:inset-0 dark:after:bg-gradient-to-b dark:after:from-transparent dark:after:to-black'
    : '';

const background_text_style =
  image !== undefined
    ? 'z-10 bg-gray-200/40 dark:bg-gray-500/20 rounded-lg backdrop-blur-xs'
    : '';

const headerHeight_sm = '72px';
const headerHeight_md = '112px';
const headerHeight_lg = '140px';
---

<section class="relative md:-mt-[76px] not-prose ${backgroundColor}" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div
    class={`relative mx-auto px-4 sm:px-6 bg-center bg-no-repeat bg-cover ${background_image_class}`}
    style={`background-image: url(${image}); background-size: cover;`}
  >
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="min-h-[82.5vh] sm:min-h-[calc(100vh-${headerHeight_sm})] md:min-h-[calc(100vh-${headerHeight_md}-76px)] lg:min-h-[calc(100vh-${headerHeight_lg})]">
      <div class={`text-center p-10 md:p-12 max-w-5xl md:mt-5 m-auto relative ${background_text_style}`}>
        {
          tagline && (
            <p class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade" set:html={tagline} />
          )
        }
        {
          title && (
            <h1 class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-white text-shadow-sm intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade" set:html={title} />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p class="text-xl mb-6 dark:text-white intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade" set:html={subtitle} />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-2xl m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0 text-white bg-primary dark:bg-primary-light hover:bg-primary-dark dark:hover:bg-primary-dark" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>

